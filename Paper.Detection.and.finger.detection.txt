// Automated Perspective Transform.cpp : Defines the entry point for the console application.
//

//Aiming the camera at the paper piano and once the four corners are obtained pressing s warps perspective and tracks pink tipped finger
#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include "opencv2\imgproc.hpp"
#include "opencv2\opencv.hpp"
using namespace cv;
using namespace std;
int Hmin = 140, Hmax = 187, Smin = 80, Smax = 255, Vmin = 108, Vmax = 249;	//Pink
int n, c = 0, o = 0;
Point fingertip;
Point pt[40];
Point2f pto[4];
Point2f pti[4];
Mat frame, a, hsv, dst, output, thresh;
vector <vector<Point> > contours;
vector <Vec4i> hierarchy;

int main()
{
	VideoCapture cap(0);
	if (!cap.isOpened())
	{
		cout << "Camera not detected";
		return -1;
	}
	while (1)
	{
		cap >> frame;
		
		if (o == 0)
		{
			cvtColor(frame, a, CV_BGR2GRAY);
			GaussianBlur(a, a, Size(3, 3), 0);
			threshold(a, thresh, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);
			//imshow("A", thresh);
			findContours(thresh, contours, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
			cout << contours.size();
			//for (auto vec : contours)
			//for (auto v : vec)
			//std::cout << v << std::endl;
			for (; c < contours.size(); c++)
			{
				Scalar color(rand() & 255, rand() & 255, rand() & 255);
				drawContours(thresh, contours, c, color, CV_FILLED, 8);
			}
			//imshow("b", thresh);
			int largestcontour;
			double largestarea = 0;
			for (int i = 0; i < contours.size(); i++)
			{
				double area = contourArea(contours[i]);
				if (area > largestarea)
				{
					largestarea = area;
					largestcontour = i;
				}
			}
			drawContours(thresh, contours, largestcontour, Scalar(255, 255, 255), 7, 8);
			imshow("Detected object", thresh);
			vector <Point> polygon;
			approxPolyDP(contours[largestcontour], polygon, 30, true);//Detects leftmost corner goes anti-clockwise
			cout << polygon;
			for (int i = 0; i < polygon.size(); i++)
			{
				pt[i] = polygon[i];
				circle(frame, pt[i], 15, Scalar(0, 255, 255), 2);
			}
			imshow("A", frame);
			if (waitKey(100) == 115)
			{
				/*for (int i = 0; i < 4; i++)
				{
					pti[i] = pt[i];
				}*/
				pti[0] = pt[0];
				pti[1] = pt[3];
				pti[2] = pt[2];
				pti[3] = pt[1];
				o++;
			}
		}
		if (o == 1)
		{
			destroyWindow("A");
			destroyWindow("Detected Object");
			pto[0] = Point2f(0, 0);
			pto[1] = Point2f(frame.cols - 1, 0);
			pto[2] = Point2f(frame.cols - 1, frame.rows - 1);
			pto[3] = Point2f(0, frame.rows - 1);
			Mat warpy = getPerspectiveTransform(pti, pto);
			warpPerspective(frame, output, warpy, output.size());
			imshow("warped image", output);
			cvtColor(output, hsv, CV_BGR2HSV);
			inRange(hsv, Scalar(Hmin, Smin, Vmin), Scalar(Hmax, Smax, Vmax), dst);
			erode(dst, dst, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
			dilate(dst, dst, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
			n = 0;
			for (int i = 0; i < dst.rows; i++)
			{
				for (int j = 0; j < dst.cols; j++)
					if (dst.at<uchar>(i, j) == 255)
					{
						n++; fingertip.x += j; fingertip.y += i;
					}
			}
			if (n >= 10)
			{
				fingertip.x = (float)fingertip.x / n;
				fingertip.y = (float)fingertip.y / n;
				circle(output, fingertip, 15, Scalar(0, 0, 255), 2);
			}
			else
			{
				fingertip.x = -1; fingertip.y = -1;
			}
			imshow("Detected Finger", output);
			if (waitKey(30) >= 0)
				break;
		}
	}
	//waitKey(0);
    return 0;
}