// Automated Perspective Transform.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "opencv2\imgproc.hpp"
#include "opencv2\opencv.hpp"
using namespace cv;
using namespace std;

int main()
{
	Mat a = imread("E:\AP.jpg", 0);//image will be read from camera
	Mat thresh;
	GaussianBlur(a, a, Size(3, 3), 0);
	threshold(a, thresh, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);
	imshow("A", thresh);
	vector <vector<Point> > contours;
	vector <Vec4i> hierarchy;
	findContours(thresh, contours, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
	cout << contours.size();
	//for (auto vec : contours)
		//for (auto v : vec)
			//std::cout << v << std::endl;
	int c = 0;
	for (; c < contours.size(); c++)
	{
		Scalar color(rand() & 255, rand() & 255, rand() & 255);
		drawContours(thresh, contours, c, color, CV_FILLED, 8);
	}
	imshow("b", thresh);
	int largestcontour;
	double largestarea = 0;
	for (int i = 0; i < contours.size(); i++)
	{
		double area = contourArea(contours[i]);
		if (area > largestarea)
		{
			largestarea = area;
			largestcontour = i;
		}
	}
	drawContours(thresh, contours, largestcontour, Scalar(255, 255, 255) , 7, 8);
	imshow("c", thresh);
	vector <Point> polygon;
	approxPolyDP(contours[largestcontour], polygon, 8, true);
	cout << polygon;
	//use points obtained to perspective transform the image
	waitKey(0);
    return 0;
}

